name: Nyros CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  # Avoid interactive prompts
  DEBIAN_FRONTEND: noninteractive

jobs:
  # Static analysis and code quality checks
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: clang
          cmake: true
          ninja: true
          cppcheck: true
          clang-tidy: true

      - name: Run clang-tidy
        run: |
          ./configure.sh --clang --debug
          find kernel/src/ -name "*.cpp" -print0 | \
            xargs -0 clang-tidy --config-file=.clang-tidy -p build/ --warnings-as-errors='*'

      - name: Run cppcheck
        run: |
          cppcheck --enable=warning,style,performance,portability \
            --error-exitcode=1 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --inline-suppr \
            --std=c++20 \
            -I kernel/include/ \
            kernel/src/

  build-matrix:
    name: Build Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: ["gcc", "clang"]
        build-type: ["Debug", "Release"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true

      - name: Install QEMU and bootloader tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 gdb \
            grub-pc-bin grub2-common \
            xorriso mtools

      - name: Configure build system
        run: |
          ./configure.sh --${{ matrix.compiler }} --${{ matrix.build-type }}

      - name: Build kernel
        run: |
          ninja -C build nyros-kernel

      - name: Build bootable image
        run: |
          ninja -C build image

      - name: Verify build artifacts
        run: |
          # Check that kernel binary exists and has expected sections
          ls -la build/kernel/nyros-kernel
          file build/kernel/nyros-kernel
          nm build/kernel/nyros-kernel | grep -E "(init|main)" || true
          
          # Check that bootable image was created
          ls -la build/image/nyros.img
          file build/image/nyros.img

      - name: Test basic boot in QEMU
        run: |
          # Quick boot test - ensure kernel starts and produces expected output
          timeout 30s qemu-system-x86_64 \
            -drive file=build/image/nyros.img,format=raw \
            -serial file:boot.log \
            -display none \
            -m 256M \
            -no-reboot || true
          
          # Check for expected output
          if [ -f boot.log ]; then
            echo "Boot log contents:"
            cat boot.log
            # Look for our expected output
            grep -q "Hello, world!" boot.log && echo "Boot test PASSED" || echo "Boot test FAILED"
          else
            echo "No boot log generated"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nyros-${{ matrix.compiler }}-${{ matrix.build-type }}
          path: |
            build/kernel/nyros-kernel
            build/image/nyros.img
            build/kernel/nyros-kernel.asm
            boot.log
          retention-days: 7

  # Test build system edge cases and configurations
  build-system-tests:
    name: Build System Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang gcc \
            ninja-build cmake \
            qemu-system-x86 \
            grub-pc-bin grub2-common \
            xorriso mtools

      - name: Test configure script help
        run: |
          ./configure.sh --help

      - name: Test dependency checker
        run: |
          ./dev-setup/setup-dev-env.sh --check-deps

      - name: Test clean build from scratch
        run: |
          ./configure.sh --clang --debug
          ninja -C build clean
          ninja -C build

      - name: Test reconfiguration
        run: |
          # Test switching between compilers and build types
          ./configure.sh --gcc --release
          ninja -C build clean
          ninja -C build
          ./configure.sh --clang --debug  
          ninja -C build clean
          ninja -C build

      - name: Test individual targets
        run: |
          ./configure.sh --clang --debug
          ninja -C build clean
          ninja -C build nyros-kernel
          ninja -C build image

      - name: Test custom optimization override
        run: |
          ./configure.sh --debug -O2
          ninja -C build nyros-kernel
          ./configure.sh --release -O0  
          ninja -C build nyros-kernel

      - name: Test verbose build
        run: |
          ./configure.sh --clang --debug --verbose
          ninja -C build nyros-kernel

      - name: Test LTO build (release only)
        run: |
          ./configure.sh --clang --release --enable-lto
          ninja -C build nyros-kernel

      - name: Verify compile_commands.json
        run: |
          ./configure.sh --clang --debug
          test -f compile_commands.json
          test -L compile_commands.json
          wc -l compile_commands.json

  # Code quality and metrics
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            ninja-build cmake \
            sloccount \
            cloc

      - name: Generate build for analysis
        run: |
          ./configure.sh --clang --debug
          ninja -C build nyros-kernel

      - name: Code metrics
        run: |
          echo "=== Code Line Counts ==="
          cloc kernel/
          echo ""
          echo "=== Kernel Binary Size ==="
          size build/kernel/nyros-kernel
          echo ""
          echo "=== Kernel Binary Info ==="
          file build/kernel/nyros-kernel
          echo ""
          echo "=== Kernel Sections ==="
          objdump -h build/kernel/nyros-kernel

      - name: Check for common issues
        run: |
          echo "=== Checking for TODO/FIXME comments ==="
          grep -r "TODO\|FIXME\|XXX\|HACK" kernel/ || echo "No TODO/FIXME found"
          echo ""
          echo "=== Checking for debug prints ==="
          grep -r "printf\|cout\|debug" kernel/ || echo "No debug prints found"


